using System.Text.Json;
using Chapter7.FaithfulnessMetric;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Connectors.AzureOpenAI;
using Microsoft.SemanticKernel.PromptTemplates.Handlebars;

// STEP 0: Initialize the application components
//
// This step initializes the application components.
// ------------------------------------------------------------

var configuration = new ConfigurationBuilder()
    .AddUserSecrets<Program>()
    .Build();

var kernel = Kernel.CreateBuilder()
    .AddAzureOpenAIChatCompletion(
        deploymentName: configuration["LanguageModel:CompletionDeploymentName"]!,
        endpoint: configuration["LanguageModel:Endpoint"]!,
        apiKey: configuration["LanguageModel:ApiKey"]!
    )
    .Build();

var logger = LoggerFactory.Create(b => b.AddConsole()).CreateLogger<Program>();

// STEP 1: Load the test samples generated by Chapter7.TestSampleGeneration
//
// This step loads the test samples generated by Chapter7.TestSampleGeneration
// and stores them in a list.
// ------------------------------------------------------------

var inputStream = File.OpenRead("Input/test-samples.json");
var records = await JsonSerializer.DeserializeAsync<List<TestSampleRecord>>(inputStream);

logger.LogInformation("Loaded {Count} test samples", records!.Count);

// STEP 2: Run the samples through the faithfulness metric prompt.
//
// This step runs the samples through the faithfulness metric prompt.
// The results are recorded to calculate the faithfulness metric.
// ------------------------------------------------------------

var promptTemplate = kernel.CreateFunctionFromPromptYaml(
    EmbeddedResource.Read("Prompts.faithfulness-metric.yaml"),
    promptTemplateFactory: new HandlebarsPromptTemplateFactory()
    {
        AllowDangerouslySetContent = true
    });

var promptExecutionSettings = new AzureOpenAIPromptExecutionSettings
{
    ResponseFormat = typeof(FaithfulnessMetricResult)
};

var results = new List<FaithfulnessMetricResult>();

for (int index = 0; index < records.Count; index++)
{
    var record = records[index];

    logger.LogInformation("Processing sample {Number} of {Total}",
        index + 1, records.Count);

    var result = await promptTemplate.InvokeAsync(
        kernel, new KernelArguments(promptExecutionSettings)
        {
            ["context"] = record.Context,
            ["statement"] = record.Answer,
        });

    var resultData = JsonSerializer.Deserialize<FaithfulnessMetricResult>(
        result.ToString());

    results.Add(resultData!);
}

logger.LogInformation("Completed processing all samples");

// STEP 3: Calculate the faithfulness metric.
//
// This step calculates the faithfulness metric by dividing the faithful statements
// by the total number of statements. The results are output to the console.
// ------------------------------------------------------------

var faithfulCount = results.Count(r => r.Faithful);
var totalCount = results.Count;

var percentage = (double)faithfulCount / totalCount * 100;

logger.LogInformation("Faithful: {FaithfulCount} of {TotalCount} ({Percentage}%)",
    faithfulCount, totalCount, percentage);